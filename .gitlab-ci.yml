#stages:
#  - sonarqube-check
#  - sonarqube-vulnerability-report
#
#sonarqube-check:
#  stage: sonarqube-check
#  image: maven:3-eclipse-temurin-17
#  variables:
#    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script:
#    - mvn verify sonar:sonar
#  allow_failure: true
#  only:
#    - merge_requests
#    - master
#    - main
#    - develop
#
#sonarqube-vulnerability-report:
#  stage: sonarqube-vulnerability-report
#  script:
#    - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=burger-service-nummer-validator&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
#  allow_failure: true
#  only:
#    - merge_requests
#    - master
#    - main
#    - develop
#  artifacts:
#    expire_in: 1 day
#    reports:
#      sast: gl-sast-sonar-report.json
#  dependencies:
#    - sonarqube-check

image: maven:3.8.4-jdk-11

stages:
  - build
  - deploy

variables:
  GROUP_ID: ${GROUP_ID}
  ARTIFACT_ID: ${ARTIFACT_ID}

before_script:
  - echo "$CI_JOB_TOKEN" | docker login -u ci-token --password-stdin $CI_REGISTRY

build:
  stage: build
  script:
    - mvn clean package -Dmaven.test.skip=true
    - docker build -t $CI_REGISTRY_IMAGE/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1h

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker pull $CI_REGISTRY_IMAGE/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA render/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA
    - docker push render/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA
  only:
    - main
